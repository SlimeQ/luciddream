
<!DOCTYPE html>
<html style="background-color:black">
<head>
<meta charset="utf-8">
<meta http-equiv="X-UA-Compatible" content="chrome=1">
</head>
<style>
html {
	background-color: black;
}

</style>
<body>
	<script src="/socket.io/socket.io.js"></script>
	<video id="webcam_feed" hidden autoplay ></video>
	<canvas id="blended" hidden></canvas>
	<canvas id="snapshot"></canvas>
 	<canvas id="server_feed"></canvas>
 <p><button onclick="startFeed()">Start Feed</button></p>

	<script>



// --------------------------------------------------------
// framerate/stats stuff
// --------------------------------------------------------
var timestamp = function() {
	return Date.now()/1000.0;
}
var lasttimestamp = timestamp();
var framerate = function() {
	var t = timestamp();
	console.log()
	var ret = t - lasttimestamp;
	lasttimestamp = t;
	console.log(ret, 'sec');
	console.log(1/ret, 'fps');
}
// --------------------------------------------------------

// --------------------------------------------------------
// image handling stuff
// --------------------------------------------------------
var video = document.getElementById('webcam_feed');
var canvas = document.getElementById('server_feed');
var snapshot = document.getElementById('snapshot');
var blended = document.getElementById('blended');
var ctx = canvas.getContext('2d');
var stx = snapshot.getContext('2d');
var btx = blended.getContext('2d');

var display = function(target, context, info, cb) {
	if (info.image) {
		var img = new Image();
    img.src = info.buffer;
    context.drawImage(img, 0, 0, target.width, target.height);
	}
	cb();
};
// assumes both frames are the same size...
var lastframe = undefined;
var blend = function(imageData1, coef1, coef2, cb) {
  for (var i = 0; i < imageData1.data.length; i += 4) {
    imageData1.data[i]     = imageData1.data[i]   * coef1 + lastframe.data[i]   * coef2; // red
    imageData1.data[i + 1] = imageData1.data[i+1] * coef1 + lastframe.data[i+1] * coef2; // green
    imageData1.data[i + 2] = imageData1.data[i+2] * coef1 + lastframe.data[i+2] * coef2; // blue
  }
	lastframe = imageData1;
	cb(imageData1);
};

// feed is video element
// dest is a canvas
// context is the context for dest
var newframe = undefined;
var capture = function(feed, dest, context, cb) {
	context.drawImage(feed, 0, 0, dest.width, dest.height);
	cb();
}
// -----------------------------------------------------------------------------

// -----------------------------------------------------------------------------
// networking, etc.
// -----------------------------------------------------------------------------
var socket = io();
var startFeed = function() {
	// set canvas dimensions
	snapshot.width = canvas.width = blended.width = video.videoWidth;
	snapshot.height = canvas.height = blended.height = video.videoHeight;

	capture(video, snapshot, stx, function() {
		if (sessionStorage.lastframe != undefined) {
			// load last frame
			var img = new Image();
			img.src = sessionStorage.lastframe;
			ctx.drawImage(img, 0, 0, canvas.width, canvas.height);
			lastframe = ctx.getImageData(0,0, canvas.width, canvas.height);

			// blend it
			blend(stx.getImageData(0,0, snapshot.width, snapshot.height), 0.9, 0.2, function(imgData) {
				// send it
				btx.putImageData(imgData, 0, 0);
				createOrGetGuid(function() {
					sendCanvas(blended, btx, framerate);
				});
			});
		} else {
			capture(video, snapshot, stx, function() {
				lastframe = stx.getImageData(0,0, snapshot.width, snapshot.height);
				createOrGetGuid(function() {
					sendCanvas(snapshot, stx, framerate);
				});
			});
		}
	});
}

var sendCanvas = function(target, context, cb) {
	sessionStorage.lastframe = target.toDataURL('image/jpeg');
	socket.emit('image', {image:true, buffer: sessionStorage.lastframe, guid : sessionStorage.guid, width : target.width, height : target.height});
	cb();
};

socket.on("image", function(info) {
	console.log(info);
	display(canvas, ctx, info, function() {
		capture(video, snapshot, stx, function() {
			blend(stx.getImageData(0,0, snapshot.width, snapshot.height), 0.9, 0.2, function(imgData) {
				btx.putImageData(imgData, 0,0);
				createOrGetGuid(function() {
					sendCanvas(blended, btx, framerate);
				});
			});
		});
	});
});
// -----------------------------------------------------------------------------


// -----------------------------------------------------------------------------
// sessioning
// -----------------------------------------------------------------------------
var guid = function() {
  function s4() {
    return Math.floor((1 + Math.random()) * 0x10000)
      .toString(16)
      .substring(1);
  }
  return s4() + s4() + '-' + s4() + '-' + s4() + '-' +
    s4() + '-' + s4() + s4() + s4();
}
var createOrGetGuid = function(cb) {
	if (sessionStorage.guid == undefined) {
		sessionStorage.guid = guid();
	}
	cb(sessionStorage.guid);
}

// -----------------------------------------------------------------------------
// HTML5 webcam stuff
// -----------------------------------------------------------------------------
navigator.getUserMedia = navigator.webkitGetUserMedia || navigator.getUserMedia;
window.URL = window.URL || window.webkitURL;

function gotStream(stream) {
	console.log('gotStream');
  if (window.URL) {
    video.src = window.URL.createObjectURL(stream);
  } else {
    video.src = stream; // Opera.
  }

  video.onerror = function(e) {
    stream.stop();
  };

  stream.onended = noStream;
	video.onloadedmetadata = startFeed;
}

function noStream(e) {
  var msg = 'No camera available.';
  if (e.code == 1) {
    msg = 'User denied access to use camera.';
  }
  document.getElementById('errorMessage').textContent = msg;
}

window.onload = function init() {
  if (!navigator.getUserMedia) {
    document.getElementById('errorMessage').innerHTML = 'Sorry. <code>navigator.getUserMedia()</code> is not available.';
    return;
  }
  navigator.getUserMedia({video: true}, gotStream, noStream);
}
</script>
</body>
</html>
